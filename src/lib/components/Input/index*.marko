class {
    typeAction(node) {
        node.type = inputType;
    }
}

<div class="input ${className}">
    <if(condition="iconName || iconText")>
        <div class="icon">
            <Icon iconName="${iconName}" iconText="${iconText}" spin="${spin}" color="--figma-color-icon" />
        </div>
    </if>
    <input
        use(typeAction)
        on-input
        on-change
        on-keydown
        on-focus
        on-blur
        value.bind="value"
        id="${id}"
        name="${name}"
        disabled="${disabled}"
        placeholder="${placeholder}"
        class="indent ${borders ? 'borders' : ''} ${invalid ? 'invalid' : ''}"
    />
    <if(condition="invalid")>
        <div class="error">
            ${errorMessage}
        </div>
    </if>
</div>

<style>
    .input {
        position: relative;
        transition: flex 0s 0.2s;
    }

    input {
        font-size: var(--font-size-xsmall);
        font-weight: var(--font-weight-normal);
        letter-spacing: var(--font-letter-spacing-neg-xsmall);
        line-height: var(--line-height);
        position: relative;
        display: flex;
        overflow: visible;
        align-items: center;
        width: 100%;
        height: 30px;
        margin: 1px 0 1px 0;
        padding: var(--size-xxsmall) var(--size-xxxsmall) var(--size-xxsmall) var(--size-xxsmall);
        color: var(--figma-color-text);
        border: 1px solid transparent;
        border-radius: var(--border-radius-small);
        outline: none;
        background-color: var(--figma-color-bg);
    }

    input:hover,
    input:placeholder-shown:hover {
        color: var(--figma-color-text-hover);
        border: 1px solid var(--figma-color-border);
        background-image: none;
    }

    input::selection {
        color: var(--figma-color-text);
        background-color: var(--text-highlight);
    }

    input::placeholder {
        color: var(--figma-color-text-tertiary);
        border: 1px solid transparent;
    }

    input:placeholder-shown {
        color: var(--figma-color-text);
        border: 1px solid var(--figma-color-border);
        background-image: none;
    }

    input:focus:placeholder-shown {
        border: 1px solid var(--figma-color-border-selected);
        outline: 1px solid var(--figma-color-border-selected);
        outline-offset: -2px;
    }

    input:disabled:hover {
        border: 1px solid transparent;
    }

    input:active,
    input:focus {
        color: var(--figma-color-text);
        border: 1px solid var(--figma-color-border-selected);
        outline: 1px solid var(--figma-color-border-selected);
        outline-offset: -2px;
    }

    input:disabled {
        position: relative;
        color: var(--figma-color-text-disabled);
        background-image: none;
    }

    input:disabled:active {
        outline: none;
    }

    .borders {
        border: 1px solid var(--figma-color-border);
        background-image: none;
    }

    .borders:disabled {
        border: 1px solid transparent;
        background-image: none;
    }

    .borders:disabled:placeholder-shown {
        border: 1px solid transparent;
        background-image: none;
    }

    .borders:disabled:placeholder-shown:active {
        border: 1px solid transparent;
        outline: none;
    }

    .borders:placeholder-shown {
        border: 1px solid var(--figma-color-border);
        background-image: none;
    }

    .indent {
        padding-left: 32px;
    }

    .invalid,
    .invalid:hover,
    .invalid:focus {
        border: 1px solid var(--figma-color-border-danger-strong);
        outline: 1px solid var(--figma-color-border-danger-strong);
        outline-offset: -2px;
    }

    .icon {
        position: absolute;
        top: -1px;
        left: 0;
        width: var(--size-medium);
        height: var(--size-medium);
        z-index: 1;
    }

    .error {
        color: var(--figma-color-text-danger);
        font-size: var(--font-size-xsmall);
        font-weight: var(--font-weight-normal);
        letter-spacing: var(--font-letter-spacing-neg-xsmall);
        line-height: var(--line-height);
        padding-top: var(--size-xxxsmall);
        padding-left: var(--size-xxsmall);
    }
</style>
